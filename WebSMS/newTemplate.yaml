apiVersion: v1
kind: Template
labels:
    template: generic-java-jenkins-pipeline
metadata:
    annotations:
        description: 'Application template for JWS applications built using a Jenkins Pipeline'
        iconClass: icon-tomcat
        tags: 'tomcat,tomcat8,java,jboss,xpaas,jenkins-ci'
        version: 1.2.0
    name: generic-java-jenkins-pipeline
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      creationTimestamp: null
      labels:
        app: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME} 
      name: ${APPLICATION_NAME}
    spec:
      output: {}
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
      type: None
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfile: |-
                  pipeline {
                    tools {
                      maven 'mvn'
                    }
                    agent any 
                
                    stages {
                      stage('Build App') {
                    
                       steps {
                         git url: "https://${GIT_TOKEN}@${GIT_URL}"
                         sh "mvn install -DskipTests=true"
                        }
                      }
                    
                      stage('Test') {
 
                        steps {
                          sh "mvn test"
                          step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                        }  
                      }
                      stage('Code Analysis') {

                        steps {
                          script {
                            sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube-${DEVOPS_PROJECT}.icp6144apps.in.dst.ibm.com  -DskipTests=true"
                          }
                        }
                      }

                      stage('Archive Jar'){
                       steps {
                        script {
                           sh "curl -k -v -u admin:admin123 --upload-file target/${APPLICATION_NAME}-1.0.jar http://nexus-${DEVOPS_PROJECT}.icp6144apps.in.dst.ibm.com/repository/Jenkins-integration/${env.BUILD_NUMBER}/${APPLICATION_NAME}-1.0.jar"

                        }
                       }
                      }
                      stage('Create Image Builder') {
                        steps {
                          script {
                            openshift.withCluster() {
                                openshift.withProject("${DEV_PROJECT}") {
                                    openshift.newBuild("--name=${APPLICATION_NAME}", "--image-stream=redhat-openjdk18-openshift:1.1", "--allow-missing-imagestream-tags=true", "--binary=true")
                                }
                            }
                         }
                        }
                      }

                      stage('Build Image') {
                  
                        steps {
                          sh "cp target/${APPLICATION_NAME}-1.0.jar target/ROOT.jar"
                          script {
                            openshift.withCluster() {
                              openshift.withProject("${DEV_PROJECT}") {
                                openshift.selector("bc", "${APPLICATION_NAME}").startBuild("--from-file=target/${APPLICATION_NAME}-1.0.jar", "--wait=true")
                              }
                            }
                          }
                         }
                      }
                      stage('Tag Image') {
                        steps {
                          script {
                            openshift.withCluster() {
                            openshift.withProject("${DEV_PROJECT}"){
                            openshift.tag("${APPLICATION_NAME}:latest", "${APPLICATION_NAME}:dev")
                            openshift.tag("${APPLICATION_NAME}:latest", "${APPLICATION_NAME}:promoteToQA")
                            aquaMicroscanner imageName: '${APPLICATION}:promoteToStage', notCompliesCmd: 'exit 1', onDisallowed: 'fail'
                           }
                         }
                       }
                      }
                     }
                      stage('Deploy In Dev') {
                            steps {
                              script {
                                openshift.withCluster() {
                                  openshift.withProject("${DEV_PROJECT}") {
                                    def app = openshift.newApp("${APPLICATION_NAME}:latest","--allow-missing-imagestream-tags=true", "-e CONFIG_SERVER_URI=http://9.42.62.186:8888/configserver/","-e PROFILE=sandbox","-e LOG_PATH=/tmp/logs" )
                                    app.narrow("svc").expose();
                                    def dc = openshift.selector("dc", "${APPLICATION_NAME}")
                                    openshift.set("triggers", "dc/${APPLICATION_NAME}", "--manual")
                                  }
                                }
                              }
                            }
                      }
                     stage('Deploy in test')
                        { 
                        steps {
                              script {
                                openshift.withCluster() {
                                  openshift.withProject("${TEST_PROJECT}") {
                                    def app = openshift.newApp("${DEV_PROJECT}/${APPLICATION_NAME}:promoteToQA","--allow-missing-imagestream-tags=true", "-e CONFIG_SERVER_URI=http://9.42.62.186:8888/configserver/","-e PROFILE=sandbox","-e LOG_PATH=/tmp/logs" )
                                    app.narrow("svc").expose();
                                    def dc = openshift.selector("dc", "${APPLICATION_NAME}")
                                    openshift.set("triggers", "dc/${APPLICATION_NAME}", "--manual")
                                    mail (to: 'bhjayara@in.ibm.com', subject: "FYI: Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) deployed to Test", body: "See ${env.BUILD_URL}/input for details. ");
                                   }
                                  openshift.withProject("${DEV_PROJECT}"){
                                   openshift.tag("${APPLICATION_NAME}:latest", "${APPLICATION_NAME}:promoteToStage")
                                  }
                                }
                              }
                           }
                         }
                         stage("Deploy in Stage based on input")
                         {
                          steps {
                            script {
                              def userInput = input(id: 'Proceed1', message: 'Promote build?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree with this']])
                              echo 'userInput: ' + userInput
                              if(userInput == true) {
                                mail (to: 'bhjayara@in.ibm.com', subject: "FYI: Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) deployed to stage", body: "See ${env.BUILD_URL} for details. ");
                                openshift.withCluster() {
                                  openshift.withProject("${STAGE_PROJECT}") {
                                    def app = openshift.newApp("${DEV_PROJECT}/${APPLICATION_NAME}:promoteToStage","--allow-missing-imagestream-tags=true", "-e CONFIG_SERVER_URI=http://9.42.62.186:8888/configserver/","-e PROFILE=sandbox","-e LOG_PATH=/tmp/logs" )
                                    app.narrow("svc").expose();
                                    def dc = openshift.selector("dc", "${APPLICATION_NAME}")
                                    openshift.set("triggers", "dc/${APPLICATION_NAME}", "--manual")
                                    }
                                 }
                                }
                               else {
                              mail (to: 'bhjayara@in.ibm.com', subject: "FYI: Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) to stage is aborted", body: "See ${env.BUILD_URL} for details. ");
                        
                              }

                          }    
                         }
                        }  
                      }
                    }
    triggers:
      - github:
          secret: secret101
        type: GitHub
      - generic:
          secret: secret101
        type: Generic
    status:
      lastVersion: 0
parameters:
  - name: APPLICATION_NAME
    required: true
  - name: DEV_PROJECT
    required: true
  - name: TEST_PROJECT
    required: true
  - name: STAGE_PROJECT
    required: true
  - name: GIT_URL
    required: true
  - name: GIT_TOKEN
    required: true 
  - name: DEVOPS_PROJECT
    required: true 

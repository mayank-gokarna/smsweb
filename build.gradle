// Top-level build file where you can add configuration options common to all sub-projects/modules.

task wrapper(type: Wrapper) {
     gradleVersion = '2.3.5'
}

    app: {{app}}
  name: {{app}}
spec:
  replicas: 1
  selector:
    app: {{app}}
    deploymentconfig: {{app}}
  strategy:
  etadata:
  name: {{ .key }}ttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64ttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client
ttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64ttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64ttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64
echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64ttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64



echo "installing gcloud SDK"
echo "======================================="
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
sudo apt-get install apt-transport-https ca-certificates gnupg
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
sudo apt-get install google-cloud-sdk
type: Opaque

{{- if .Values.ingress.tunzip terraform*.zipttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64ttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64
sudo mv terraform /usr/local/bin
terraform version

echo " installing Kube client"unzip terraform*.zip
sudo mv terraform /usr/local/bin
terraform versionttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64ttps://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

echo " installing helm"
echo "======================================="
wget https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
tar -zxvf helm-v3.4.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/
rm helm-v3.4.0-linux-amd64.tar.gz
rm -rf linux-amd64

echo " installing Kube client"unzip terraform*.zip
sudo mv terraform /usr/local/bin
terraform version

echo " installing Kube client"unzip terraform*.zip
sudo mv terraform /usr/local/bin
terraform version

echo " installing Kube client"ls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
echo " installing Terraform"
echo "============================================"

wget https://relea
      {{- range .hosts }}
        - {{ . | quote }}
		apt-rtificates \
    curl \
echo " installing Terraform"
echo "============================================"
unzip terraform*.zip
sudo mv terraform /usr/local/bin
terraform version

echo " installing Kube client"
wget https://relea
    gnupg-agent \
    softwareommon
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
echo " installing Terraform"
echo "============================================"

wget https://relea
echo " installing Terraform"
echo "============================================"

wget https://releaunzip terraform*.zip
sudo mv terraform /usr/local/bin
terraform version

echo " installing Kube client"
sudo apt-get install dockeommon
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get install docke
echo " installing Terraform"
echo "============================================"

wget https://relea
echo " installing Terraform"
echo "============================================"

wget https://relea
    gnupg-agent \
    softwad64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get install docker-ce docker-ce-cli containerd.io
systemctl enable d
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
postgres@cloudshell:~ (vg1np-apps-hlpm-caas-42)$ ps -ef | grep postgres
root        2179     599  0 08:06 pts/2    00:00:00 sudo su - postgres
root        2180    2179  0 08
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . | quote }}
		apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \:06 pts/2    00:00:00 su - postgres
postgres    2181    2180  0 08:06 pts/2    00:
apiVersion: v1
appVersion: "1.0"
description: Helm chart for a JBoss app
name: jboss-as-chart
version: 1.0
client_email": "vg1np-apps-hlpm-sa@vg1np-apps-hlpm-73.iam.gserviceaccount.com",
  "client_id": "115681741552697525378",
  
    stages  {

    deploymentconfig: {{app}}
  strategy:
  etadata:
  name: {{ .key }}
type: Opaque


sudo apt install software-properties-common
sudo apt-add-repository --yes --update ppa:ansible/ansible
sudo apt install ansible -y
ansible --version

echo " instaling doc
        stage('initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                '''
    